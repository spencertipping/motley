#!/bin/bash
# Motley config file editing interface
motley_defmodule confedit <<'EOF'
Config file editing
A set of functions used by other motley modules to edit dotfiles. This
interface is safer than doing it otherwise, as it makes sure the dotfiles have
"generated by motley" markers before changing them.

Here's an example motley command that uses this interface to echo each machine
it encounters from your ~/.bashrc:

  motley_defcommand echo
  motley_conf_echo_init() {
    motley_confedit motley_echo_bashrc ~/.bashrc
  }
  motley_conf_other_echo() {
    local machine_key=$1
    echo "echo $machine_key" >> $motley_echo_bashrc
  }
  motley_conf_echo_end() {
    motley_confedit_commit motley_echo_bashrc
  }

After this, you could write a Motfile containing something like this:

  machine foo
  foo echo

This would result in the following being added to ~/.bashrc:

  echo foo
EOF

# Documentation for the error message below
motley_defmodule templates <<'EOF'
Confedit templates
Anytime you want motley to edit a file that exists somewhere on disk, like your
~/.bashrc, you need to do a few things to convince motley that it's actually ok
do to this:

1. mv ~/.bashrc ~/.bashrc.motley                # create the template
2. echo "# MOTLEYGEN" >> ~/.bashrc.motley       # add an "ok to modify" tag

If you skip either step, motley will refuse to modify anything and will print
an error message leading you here. This setup only needs to happen once.
EOF

motley_confedit() {
  # A few things about the code below that deserve some explanation...
  #
  # motley_confedit needs to handle a few interesting cases. One is that
  # multiple modules/commands can request to edit the same dotfile and this
  # needs to be handled correctly (i.e. they all need to get the same staging
  # file). Another is that all edits must be done atomically: we can't risk
  # being in the middle of some syntax-breaking edit when the user opens a new
  # terminal or otherwise accesses dotfiles. This means we create a staging
  # file for the dotfile being edited. We then hand out hardlinks to the
  # staging file as a kind of semaphore.
  #
  # Finally, there are a few cases where something is egregiously wrong, like
  # the user hasn't indicated that a dotfile should be modified by motley.
  # Motley is very conservative about this since it's bad practice to blow away
  # people's dotfiles. So we die immediately and explain to the user how to fix
  # the problem.

  local var=$1
  local file=$2
  local link=$(mktemp -u "$file.XXXXXXXX")

  # Look for a template file and make sure the original contains the "generated
  # by motley" marker (the string MOTLEYGEN).
  if ! [[ -r "$file.motley" ]]; then
    echo "motley: attempted a configuration file edit on $file," >&2
    echo "        but $file.motley (the template) doesn't exist" >&2
    echo "        (run motley -h templates for info about this)" >&2
    exit 1
  fi

  if [[ -r "$file" ]] && ! grep -q "MOTLEYGEN" "$file"; then
    echo "motley: attempted a configuration file edit on $file,"   >&2
    echo "        but it doesn't appear to have been generated by" >&2
    echo "        motley -- cowardly refusing to change anything"  >&2
    echo "        (run motley -h templates for info about this)"   >&2
    exit 1
  fi

  # At this point it's ok to edit the file, so set up the staging file (if it
  # doesn't exist already) and hand out a hardlink to it.
  local stage=$file.motley_staging
  [[ -e $stage ]] || cp "$file.motley" "$stage"
  ln "$stage" "$link"
  eval "$var=\$link"
}

motley_confedit_commit() {
  local var=$1
  eval "local link=\$$var"

  if [[ -z "$link" ]]; then
    # Something's horribly wrong: the var we got doesn't go anywhere.
    echo "motley: attempted to commit a nonexistent staging file $var"   >&2
    echo "        most likely this is a misuse of motley_confedit() or " >&2
    echo "        motley_confedit_commit()"                              >&2
    exit 1
  fi

  local stage=${link%.*}.motley_staging
  rm "$link"

  # If we've just removed the last link to the staging file, then move it over
  # the file it represents. Otherwise do nothing since other modules are still
  # editing it.
  if [[ $(stat -c %h "$stage") = 1 ]]; then
    chmod -w "$stage"
    mv -f "$stage" "${stage%.motley_staging}"
  fi
}
