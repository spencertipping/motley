#!/bin/bash
# Motley config file editing interface
motley_defmodule confedit <<'EOF'
Config file editing
A set of functions used by other motley modules to edit dotfiles. This
interface is safer than doing it otherwise, as it makes sure the dotfiles have
"generated by motley" markers before changing them.

Here's an example motley command that uses this interface to echo each machine
it encounters from your ~/.bashrc:

  motley_defcommand echo
  motley_conf_echo_init() {
    motley_confedit motley_echo_bashrc ~/.bashrc
  }
  motley_conf_other_echo() {
    local machine_key=$1
    echo "echo $machine_key" >> $motley_echo_bashrc
  }
  motley_conf_echo_end() {
    motley_confedit_commit motley_echo_bashrc
  }

After this, you could write a Motfile containing something like this:

  machine foo
  foo echo

This would result in the following being added to ~/.bashrc:

  echo foo
EOF

# Documentation for the error message below
motley_defmodule templates <<'EOF'
Confedit templates
Anytime you want motley to edit a file that exists somewhere on disk, like your
~/.bashrc, you need to do a few things to convince motley that it's actually ok
do to this:

1. mv ~/.bashrc ~/.bashrc.motley                # create the template
2. echo "# MOTLEYGEN" >> ~/.bashrc.motley       # add an "ok to modify" tag

If you skip either step, motley will refuse to modify anything and will print
an error message leading you here. This setup only needs to happen once.
EOF

motley_confedit() {
  # A few things about the code below that deserve some explanation...
  #
  # motley_confedit needs to handle a few interesting cases. One is that
  # multiple modules/commands can request to edit the same dotfile and this
  # needs to be handled correctly (i.e. they all need to get the same staging
  # file). Another is that all edits must be done atomically: we can't risk
  # being in the middle of some syntax-breaking edit when the user opens a new
  # terminal or otherwise accesses dotfiles. This means we create a staging
  # file for the dotfile being edited. We then hand out hardlinks to the
  # staging file as a kind of semaphore.
  #
  # Finally, there are a few cases where something is egregiously wrong, like
  # the user hasn't indicated that a dotfile should be modified by motley.
  # Motley is very conservative about this since it's bad practice to blow away
  # people's dotfiles. So we die immediately and explain to the user how to fix
  # the problem. The second check is done in motley_confedit_commit. It's
  # important to do it there because it minimizes the time between checking the
  # file's editability and modifying it.

  local var=$1
  local file=$2
  local link=$(mktemp -u "$file.motley_staging.XXXXXXXX")

  # Look for a template file. If we don't have one, copy the original to the
  # staging location -- but most likely the original file has no MOTLEYGEN tag
  # anyway, so the edit will ultimately fail.
  if ! [[ -r "$file.motley" ]]; then
    echo "motley: using creating $file.motley as a template for $file"     >&2
    echo "        (though unless $file contains the MOTLEYGEN tag nothing" >&2
    echo "         will happen)"                                           >&2
    cp "$file" "$file.motley"
  fi

  # Set up a staging file if it doesn't exist yet and hand out a hardlink to
  # it.
  local stage=$file.motley_staging
  [[ -e $stage ]] || cp "$file.motley" "$stage"
  ln "$stage" "$link"
  eval "$var=\$link"
}

motley_confedit_commit() {
  local var=$1
  eval "local link=\$$var"

  if [[ -z "$link" ]]; then
    # Something's horribly wrong: the var we got doesn't go anywhere.
    echo "motley: attempted to commit a nonexistent staging file $var"   >&2
    echo "        most likely this is a misuse of motley_confedit() or " >&2
    echo "        motley_confedit_commit()"                              >&2
    exit 1
  fi

  local stage=${link%.*}
  rm "$link"

  # If we've just removed the last link to the staging file, then move it over
  # the file it represents. Otherwise do nothing since other modules are still
  # editing it.
  if [[ $(stat -c %h "$stage") = 1 ]]; then
    local file="${stage%.motley_staging}"
    if [[ -r "$file" ]] && ! grep -q "MOTLEYGEN" "$file"; then
      # Move the staging file into a tempfile and then complain. We can't leave
      # the staging file where it is, because future invocations of motley will
      # then assume it's in the middle of a concurrent edit and use it. The
      # right answer for that situation is to reinit the staging file from the
      # motley template.
      local tempfile=$(mktemp "$stage.XXXX")
      mv -f "$stage" "$tempfile"
      echo "motley: attempted a configuration file edit on $file,"   >&2
      echo "        but it doesn't appear to have been generated by" >&2
      echo "        motley -- cowardly refusing to change anything"  >&2
      echo "        (run motley -h templates for info about this)"   >&2
      echo "        the staging file is available at $tempfile"      >&2
      return 1
    else
      chmod -w "$stage"
      mv -f "$stage" "$file"
    fi
  fi
}
