#!/bin/bash
# https://github.com/spencertipping/motley
# MIT license

MOTLEY_MODES=                   # informational modes
MOTLEY_SPLITMODES=              # acting modes
MOTLEY_COMMANDS=                # NB: we assume these are all for split modes
MOTLEY_MODULES=
MOTLEY_MACHINES=

# Core functions
# These are all defined with the motley_ prefix, then exported later by
# modules.
motley_machine() {
  local machine=$1
  local machine_key=${machine//[^A-Za-z0-9]/_}
  shift
  MOTLEY_MACHINES="$MOTLEY_MACHINES $machine"
  eval "$machine_key() {
    motley_\${MOTLEY_MODE}_machine \"$machine_key\" \"$machine\" \"\$@\"
  }"

  while (( $# )); do
    motley_machine_meta_$1 "$machine_key" "$machine" "$2"
    shift 2
  done
}

motley_defmodule() {
  MOTLEY_MODULES="$MOTLEY_MODULES $1"
  eval "MOTLEY_MODULE_DOC_$1=\"\$(cat)\""
}

motley_defmode() {
  for m; do
    MOTLEY_MODES="$MOTLEY_MODES $m"
    eval "motley_${m}_init() { :; }
          motley_${m}_machine() { :; }
          motley_${m}_end()  { :; }"
  done
}

motley_splitmode() {
  for m; do
    motley_defmode $m
    MOTLEY_SPLITMODES="$MOTLEY_SPLITMODES $m"
    eval "motley_${m}_machine() {"'
      if [[ `hostname` = $1 ]]; then
        local cmd=$3
        shift 3
        motley_${MOTLEY_MODE}_self_$cmd "$@"
      else
        local machine_key=$1
        local machine=$2
        local cmd=$3
        shift 3
        motley_${MOTLEY_MODE}_other_$cmd "$machine_key" "$machine" "$@"
      fi
    }'
  done
}

# Informational modes
motley_defmode modes modules machines

motley_modes_init() {
  for m in $MOTLEY_MODES; do
    echo $m
  done
  exit 0
}

motley_modules_init() {
  for m in $MOTLEY_MODULES; do
    echo $m
  done
  exit 0
}

motley_machines_end() {
  for h in $MOTLEY_MACHINES; do
    eval "echo \$h \"\${MOTLEY_MACHINE_${m//[^a-zA-Z0-9]/_}[@]}\""
  done
  exit 0
}

# Core operative modes
motley_defmode ls
motley_splitmode conf start stop status run

motley_ls_machine() {
  shift
  echo "$@"
}

# Command definitions
motley_defcommand() {
  MOTLEY_COMMANDS="$MOTLEY_COMMANDS $1"
  eval "MOTLEY_COMMAND_DOC_$1=\"\$(cat)\""

  for m in $MOTLEY_MODES; do
    eval "motley_${m}_${1}_init() { :; }
          motley_${m}_${1}_end()  { :; }"
  done

  for m in $MOTLEY_SPLITMODES; do
    eval "motley_${m}_${1}_init() { :; }
          motley_${m}_self_${1}() { :; }
          motley_${m}_other_${1}() { :; }
          motley_${m}_${1}_end() { :; }"
  done
}

# Main argument processing
# First load any motley modules.
machine() { motley_machine "$@"; }
for m in "$(dirname "$0")"/motley-* ~/.motley.d/motley-*; do
  [[ -r "$m" ]] && source "$m"
done

# Now decide which motfile we're using and cd there.
MOTLEY_MOTFILE=Motfile
while [[ ${1#-} != $1 ]]; do
  case $1 in
    -f)
      MOTLEY_MOTFILE=$2
      shift 2
      ;;

    # Help about something; either a module or a command
    -h)
      if [[ -n "$2" ]]; then
        eval "echo \"\$MOTLEY_MODULE_DOC_$2\$MOTLEY_COMMAND_DOC_$2\" >&2"
        echo
      else
        {
          echo "motley usage:"
          echo "  motley [-f /path/Motfile] mode [args...]"
          echo
          echo "where modes are"
          for m in $MOTLEY_MODES; do
            echo "- $m"
          done
          echo
          echo "help topics (e.g. motley -h topic):"
          for m in $MOTLEY_MODULES $MOTLEY_COMMANDS; do
            echo "- $m"
          done | sort
          echo
        } >&2
      fi
      exit 0
      ;;

    *)
      echo "motley: unrecognized option $1 (try -h for help)" 1>&2
      exit 1
      ;;
  esac
done

cd "$(dirname "$MOTLEY_MOTFILE")"

# Load any more modules in the motfile directory.
for m in motley-*; do
  [[ -r "$m" ]] && source "$m"
done

# Now set the mode based on command-line arguments, initialize modes, source
# the motfile, and end modes.
MOTLEY_MODE=${1:-ls}
shift
MOTLEY_ARGS=( "$@" )

motley_${MOTLEY_MODE}_init
for c in $MOTLEY_COMMANDS; do
  motley_${MOTLEY_MODE}_${c}_init
done

if [[ -r "$MOTLEY_MOTFILE" ]]; then
  source "$MOTLEY_MOTFILE"
else
  echo "motley: no Motfile present, so only informational modes will work" >&2
fi

motley_${MOTLEY_MODE}_end
for c in $MOTLEY_COMMANDS; do
  motley_${MOTLEY_MODE}_${c}_end
done
